lex------------------- file.l
-------------------------------------------------------------------------
%{
	#include "y.tab.h"
%}
%option reentrant bison-bridge
// reentrant means (thread-safe) parser/lexer
// A reentrant program is one which does not alter in the course of execution; in other words, it consists entirely of pure (read-only) code. Reentrancy is important whenever asynchronous execution is possible
// This changes yylex () to yylex (void *). The argument to yylex contains initialized memory for the lexer which is initialized using yylex_init:
// and then release the memory after finishing the lexing
// A compatible bison scanner is generated by declaring ' %option bison-bridge '
%%

[0-9]+ {
	*yylval = atoi(yytext);
	return NUMBER;
}

[\t]	;

.		return yytext[0];

[\n]	return 0;

%%

int yywrap(yyscan_t scanner){
	return 1;
}

---------------------------------------------------Yacc file.y -------------------------------------------
%{
	#include <stdio.h>
	#include <stdlib.h>
	#include <omp.h>
	int NOT, EPT;
	char FILENAME[100];
%}

%token NUMBER
%pure-parser
// creates Reeantrant parser In bison, you specify additional parameters for yylex using the %lex-param directive. 

%left '-' '+'
%left '*' '/' '%'
%left '(' ')'

%param {void* scanner}

%%

Expr:	E {return $$;}
E:
	|	E '+' E {$$ = $1 + $3;}
	|	E '-' E {$$ = $1 - $3;}
	|	E '*' E {$$ = $1 * $3;}
	|	E '/' E {$$ = $1 / $3;}
	|	E '%' E {$$ = $1 % $3;}
	|	'(' E ')' {$$ = $2;}
	|	NUMBER {$$ = $1;}

%%

void function(){
	void* scanner;
	yylex_init(&scanner); // changes yylex() to yylex(void *) hence we can pass a lex-param
	int tid,i,j,res;
	tid = omp_get_thread_num();
	FILE *fp;
	fp = fopen(FILENAME, "r");
	char* s = malloc(100);
	size_t n = 100;
	for(i=0; i<(EPT*tid); i++){
		getline(&s,&n,fp);
	}
	yyset_in(fp,scanner); // Set the input stream.
	for(j=0; j< EPT; j++){
		res = yyparse(scanner);
		printf("%dth expression result\t: %d\t| evaluated by Thread %d\n",(tid*EPT+j+1),res,tid);
	}
	yylex_destroy(scanner);
	fclose(fp);
}

void main(){
	printf("Enter FILENAME\n");
	scanf("%s",FILENAME);
	printf("Enter No Of Threads\n");
	scanf("%d",&NOT);
	printf("Enter Expressions Per Threads\n");
	scanf("%d",&EPT);
	#pragma omp parallel num_threads (NOT)
	{
		function();
	}
}

int yyerror()
{
   printf("\nArithmetic expression is Invalid\n\n");
}