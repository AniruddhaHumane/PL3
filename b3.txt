#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <iostream>
#include <cuda.h>

using namespace std;
__global__ void sort(int* arr_d, int* arr_ld, int* arr_hd, int pivot) {
	int id = threadIdx.x;
	int element = arr_d[id + 1];
	bool flag = element <= pivot;
	__syncthreads();
	flag ? arr_ld[id] = element : arr_hd[id] = element;
}

void quicksort(int *arr, int n) {
	if (n <= 1) return;
	int *arr_d, *arr_hd, *arr_ld, *arr_l, *arr_h;
	int pivot = arr[0];
	size_t size = n * sizeof(int);
	arr_l = new int[n];
	arr_h = new int[n];
	for (int i = 0; i < n; i++)
		arr_l[i] = arr_h[i] = -9999;
	cudaMalloc((void **)&arr_d, size);
	cudaMalloc((void **)&arr_ld, size);
	cudaMalloc((void **)&arr_hd, size);
	cudaMemcpy(arr_d, arr, size, cudaMemcpyHostToDevice);
	cudaMemcpy(arr_ld, arr_l, size, cudaMemcpyHostToDevice);
	cudaMemcpy(arr_hd, arr_h, size, cudaMemcpyHostToDevice);
	sort <<<1, n - 1 >>> (arr_d, arr_ld, arr_hd, pivot);
	cudaMemcpy(arr_l, arr_ld, size, cudaMemcpyDeviceToHost);
	cudaMemcpy(arr_h, arr_hd, size, cudaMemcpyDeviceToHost);
	int *temp1, *temp2;
	temp1 = new int[n];
	temp2 = new int[n];
	for (int i = 0; i < n;i++)
		temp1[i] = temp2[i] = -9999;
	int j=0, k=0;
	for (int i = 0; i < n;i++) {
		if (arr_l[i] != -9999) 
			temp1[j++] = arr_l[i];
		if (arr_h[i] != -9999) 
			temp2[k++] = arr_h[i];
	}
	quicksort(temp1, j);
	quicksort(temp2, k);
	int p = 0;
	for (int i = 0; i < j; i++)
		arr[p++] = temp1[i];
	arr[p++] = pivot;
	for (int i = 0; i < k; i++)
		arr[p++] = temp2[i];
	cudaFree(arr_d);
	cudaFree(arr_hd);
	cudaFree(arr_ld);
	delete(temp1);
	delete(temp2);
	delete(arr_l);
	delete(arr_h);
}

int main() {
	int arr[50], n;
	cout << "Enter size of array" << endl;
	cin >> n;
	cout << "Enter array elements" << endl;
	for (size_t i = 0; i < n; i++)
		cin >> arr[i];
	quicksort(arr, n);
	cout << "Sorted Array" << endl;
	for (size_t i = 0; i < n; i++)
		cout << arr[i] << endl;
	cin.get();
	cin.get();
	return 0;
}